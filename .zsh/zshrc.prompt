
#show branchname
autoload -Uz vcs_info
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "+"
zstyle ':vcs_info:git:*' unstagedstr "-"
zstyle ':vcs_info:*' formats '%b%c%u'
zstyle ':vcs_info:*' actionformats '%b|%a%c%u'


# preparation for user prompt
function _prompt_myprecmd () {
    exit_status=$?
    if ! $ran_something; then
        exit_status=0
    fi
    ran_something=false

    # Python
    if [ -e $HOME/.pyenv ];then
        PYTHON_VERSION_NAME=$(pyenv version-name)
        if [ "${PYTHON_VERSION_NAME}" = 'system' ];then
            PYTHON_VERSION_STRING=""
        else
            PYTHON_VIRTUAL_ENV_STRING=""
            if [ -n "$VIRTUAL_ENV" ]; then
                PYTHON_VIRTUAL_ENV_STRING=":`basename \"$VIRTUAL_ENV\"`"
            fi
            PYTHON_VERSION_STRING="[py:${PYTHON_VERSION_NAME}${PYTHON_VIRTUAL_ENV_STRING}]"
        fi
    fi
}
add-zsh-hook precmd _prompt_myprecmd
function _prompt_mypreexec () {
    ran_something=true
}
add-zsh-hook preexec _prompt_mypreexec
show_non_zero_exit_status() {
    local GREEN=$'%{\e[1;32m%}'
    local RED=$'%{\e[1;31m%}'
    case $exit_status in
    0)
        echo $GREEN #TODO change color uid=0
        :;;
    1 | 126 | 127)
        echo $RED
        :;;
    *)
        echo "${RED}[${exit_status}]";;
    esac
}

# user prompt
local GREEN=$'%{\e[1;32m%}'
local RED=$'%{\e[1;31m%}'
local DEFAULT=$'%{\e[0;m%}'
PROMPT=$GREEN'%(!.#.$) '$DEFAULT
PROMPT='$(show_non_zero_exit_status)%(!.#.$) '${DEFAULT}
PROMPT2="${GREEN}%B%{${fg[blue]}%}%_#%{${reset_color}%}%b ${DEFAULT}"
SPROMPT="%B%{${fg[blue]}%}%r is correct? [n,y,a,e]:%{${reset_color}%}%b ${DEFAULT}"
VSN="%1(v|(%1v)|)"

MYSHORTHOST=`hostname -s`
if [ "$TMUX" = "" ]; then
    RPROMPT=$GREEN'[$USER@$MYSHORTHOST:%~]$VSN${PYTHON_VERSION_STRING}'$DEFAULT
else
    #exclude username when tmux is active
    RPROMPT=$GREEN'[$MYSHORTHOST:%~]$VSN${PYTHON_VERSION_STRING}'$DEFAULT
fi

function _vcs_myprecmd () {
    #for version system
    psvar=()
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"$(_git_not_pushed)
}

function _git_not_pushed() {
  if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
    head="$(git rev-parse HEAD 2> /dev/null)"
    for x in $(git rev-parse --remotes)
    do
      if [ "$head" = "$x" ]; then
        return 0
      fi
    done
    echo "*"
  fi
  return 0
}
add-zsh-hook precmd _vcs_myprecmd

