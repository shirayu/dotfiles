

# TODO:
#   Improve __gxpc_tool_complete

# gxpc tool
__gxpc_tool_complete() {
  typeset -a commands build_flags
  commands+=(
    'cd[Set current directory of the selected nodes to DIRECTORY.]'
    'e[Execute the command on the selected nodes.]'
#     'ep[Execute the command on the selected nodes.]'
    'js[Execute the given jobs]'
    'explore[Login target hosts specified by OPTIONS and TARGET.]'
#     'export[]'
    'help[Show summary of gxpc commands or a help on a specific COMMAND.]'
#     'i[]'
#     'log_base_time[]'
#     'log_level[]'
    'make[Parallel and distributed make]'
#     'makectl[]'
#     'makeman[]'
#     'mapred[]'
#     'mw[]'
    'ping[Send a small message to the selected nodes and show some information.]'
#     'popmask[]'
#     'pp[]'
#     'prof_start[]'
#     'prof_stop[]'
#     'pushmask[]'
    'quit[Quit gxp session. By default, all daemons will exit.]'
#     'reclaim[]'
#     'restoremask[]'
    'rmask[Reset execution mask. Let all nodes execute subsequent commands.]'
#     'rsh[]'
#     'savemask[]'
#     'set_max_buf_len[]'
#     'show_explore[]'
#     'showmasks[]'
    'smask[Modify the set of nodes that will execute subsequent commands.]'
    'stat[Show all live gxp daemons in tree format.]'
    'trim[Trim (release) some subtrees of gxp daemons.]'
    'use[Configure login targets matching a particular pattern.]'
    'version[Print version]'
#     'vgxp[]'
  )
  if (( CURRENT == 2 )); then
    # explain gxpc commands
    _values 'gxpc tool commands' ${commands[@]}
    return
  fi

  case ${words[2]} in
      help)
          _values "${commands[@]}" 
          ;;
      explore)
        _arguments \
            '(- *)'--dry'[dryrun. only show target hosts]'\
            '(- *)'{-h,--hostfile}'[give known hosts by file]:file:_files' \
            '(- *)'--hostcmd'[give known hosts by command output HOSTS_CMD]' \
            '(- *)'{-t,--targetfile}'[give target hosts by file]:file:_files' \
            ': :_files'
          ;;
#       js)
#         _arguments \
#             '(- *)'{-a,--attrs}'[process attributes given in the command line]'\
#             ': :_files'
#           ;;

      *)
          ;;
  esac
}

compdef __gxpc_tool_complete gxpc


# from http://www.logos.ic.i.u-tokyo.ac.jp/~s1s5/program/shell_commands
# 前の gxp コマンドが成功/失敗したホストの一覧を出力
function ghosts(){
    if [ "$1" = '-s' ]; then
        gxpc pushmask
        gxpc smask
        gxpc ping
        gxpc popmask
        gxpc ping > /dev/null
    elif [ "$1" = '-f' ];then
        gxpc pushmask
        gxpc smask -
        gxpc ping
        gxpc popmask
        gxpc ping > /dev/null
    else
        echo "Unknown option $@"
        echo "-s : "
        echo "-f : "
    fi

}

# Do the given command in a single host                       
function gxpc_single(){
    local TARGET=`gxpc e hostname | shuf | head -n1`
    echo "[Target: ${TARGET} ]" 1>&2
    gxpc e " (hostname | grep ${TARGET} > /dev/null )  && cd ${PWD} && $* "
}

# A wrapper of "gxpc js"
function gxpc_all(){
    atexit() {
        rm -rf ${tmpdir}
    }
    trap atexit EXIT
    trap 'trap - EXIT; atexit; exit -1' INT PIPE TERM
    tmpdir=`mktemp -d`
    cpu_factor=0.5
    if [[ "$1" != "" ]];then
        cpu_factor=$1
    fi
    gxpc js -a cpu_factor=${cpu_factor} -a log_file=${tmpdir}/log -a state_dir=${tmpdir}/state -a work_fd=0
}

